// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String        @id @default(uuid())
  githubId  Int           @unique
  username  String
  avatarUrl String
  chats     Member[]  // Through join table
  createdAt DateTime      @default(now())
  friends   Friend[]  @relation("UserFriends")
  addedBy   Friend[]  @relation("FriendsUsers")
}

model Friend {
  id        String   @id @default(uuid())
  user      User     @relation("UserFriends", fields: [userId], references: [id])
  friend    User     @relation("FriendsUsers", fields: [friendId], references: [id])
  friendId  String
  userId    String
  status    String   // pending, accepted, blocked
  createdAt DateTime @default(now())

  @@unique([userId, friendId])
}

model Chat {
  id           String        @id @default(uuid())
  name         String?       // group name
  isGroup      Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  messages     Message[]
  members      Member[]  // many-to-many via ChatMember
}

model Message {
  id        String      @id @default(uuid())
  content   String
  senderId  String
  chatId    String
  createdAt DateTime    @default(now())
  
  sender    Member  @relation(fields: [senderId], references: [id])
  chat      Chat        @relation(fields: [chatId], references: [id])
}

model Member {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  chat      Chat       @relation(fields: [chatId], references: [id])
  chatId    String
  messages  Message[]
  joinedAt  DateTime   @default(now())

  @@unique([userId, chatId]) // Prevent duplicate membership
}
